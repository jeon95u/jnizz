import sys
import string
import binascii


def isPrintable(data):
    for c in data:
        if chr(c) not in string.printable:
            return False
    return True


def check(de_reg, uinput):
    cnt = 0
    for c in de_reg:
        if chr(c) in uinput:
            cnt += 1
    return True if cnt >= 3 else False


class Tombstone:
    def __init__(self, pkg_name, text, crashed_func_name, args):
        self.pkg_name = pkg_name
        self.text = text
        self.crashed_func_name = crashed_func_name
        self.args = args
        self.register = {}
        self.memory = {}
        self.exploitable_lv = Exploitable.LV_NOT_CHECKTED

        ret = self.parsing()
        if ret:
            self.exploitable_lv = Exploitable.exploitable(self)

    def parsing(self):
        tomb = self.text

        try:
            package = tomb.split('>>> ')[1].split(' <<<')[0]
            if package != self.pkg_name:
                return False
        except:
            pass

        register_list = ['eax', 'ebx', 'ecx', 'edx', 'esi', 'edi', 'eip', 'ebp', 'esp']
        for reg in register_list:
            try:
                self.register[reg] = tomb.split(reg)[1].split('  ')[0].strip()
                near_mem = tomb.split('memory near {}:\n'.format(reg))[1].split('\n\n')[0]
                self.memory[reg] = near_mem
            except:
                pass

        try:
            self.memory['eip'] = tomb.split('code around eip:\n')[1].split('\n\n')[0]
        except:
            pass

        return True


class Exploitable:
    LV_NOT_CHECKTED = 0
    LV_EXPLOITABLE = 1
    LV_PROBABLY_EXPLOITABLE = 2
    LV_PROBABLY_NOT_EXPLOITABLE = 3
    LV_NOT_EXPLOITABLE = 4
    EXPLOITABLE_TXT = ['Not Checked', 'Exploitable', 'Probably Exploitable',
                       'Probably Not Exploitable', 'Not Exploitable']

    def exploitable(tombstone: Tombstone):
        de_eip = bytes.fromhex(tombstone.register['eip'])

        if isPrintable(de_eip) or check(de_eip, tombstone.args[0]):
            return Exploitable.LV_EXPLOITABLE

        if 'stack corruption detected' in tombstone.text:
            return Exploitable.LV_PROBABLY_NOT_EXPLOITABLE

        for reg in tombstone.register:
            de_reg = bytes.fromhex(tombstone.register[reg])
            if check(de_reg, tombstone.args[0]):
                return Exploitable.LV_NOT_EXPLOITABLE

        return Exploitable.LV_NOT_EXPLOITABLE


# if __name__ == '__main__':
#     if len(sys.argv) > 1:
#         tombstone_path = sys.argv[1]
#     else:
#         tombstone_path = '/Users/jeon95u/Downloads/tombstone_fp/tombstone_01'
#
#     with open(tombstone_path, 'r') as f:
#         tombstone = f.read()
#
#     print(Exploitable('aaaaaaaaaaAAAAAAAAAAAaaaaaaBBBBBBBbbbbbbb', tombstone).exploitable())
